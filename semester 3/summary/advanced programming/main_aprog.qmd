---
title: "Zusammenfassung Advanced Programming"
author: "Joel von Rotz & Andreas Ming"
date: "01.01.2023"

lang: de

# [RENDER CONFIGURATION] ==============================
format:
  pdf:
    include-in-header:
      - config.tex
    keep-tex: true

pdf-engine: pdflatex
# [DOCUMENT CONFIGURATION] ============================
geometry: 
- "top=25mm"
- "bottom=30mm"
- "left=15mm"
- "right=15mm"
papersize: a4paper
fontsize: 9pt

code-block-border-left: false
code-block-bg: "#f7f7f7"

toc: true
toc-depth: 3
number-sections: true
number-depth: 3
pagenumbering: none
highlight-style: github
---

# `C#` und `.Net`-Framework

{{< include chapters/csharp_and_net_framework.qmd >}}

# Konzepte `C#`

{{< include chapters/concepts_csharp.qmd >}}

# Vererbung

{{< include chapters/inheritance.qmd >}}

# Linux & Raspberry Pi 4

{{< include chapters/linux_and_raspberry_pi4.qmd >}}

# **W**indows **P**resentation **F**oundation

# Notes

## Overflows Integer

Im folgenden Code wird eine Variable `i` mit dem maximalen Wert eines `int` geladen und folgend inkrementiert.

```csharp
int i = int.MaxValue;
i++;
```

Wird aber dies direkt in der Initialisierung eingebettet (`...+ 1`), ruft der Compiler aus, da er den Overflow erkennt. (Einsetzung von Compilern)

```csharp
int i = int.MaxValue + 1; // COMPILE-FEHLER
i++;
```

::: callout-caution

Dieser Overflow-Fehler gilt nur bei **konstanten** Werten bei der Initialisierung. Wird eine separate Variable mit dem Maximalwert initialisierit und an `i` hinzuaddiert, gibt es keinen Fehler.


```csharp
int k = int.MaxValue;
int i = k + 1; // KEIN Fehler
```

:::

`\end{multicols}`{=latex}



# Glossar

- **Timeslicing**: Bei Computersystemen wird *timeslicing* verwendet, damit mehrere Prozesse "parallel" verlaufen können. Jedem Prozess/Thread wird ein fixer Zeitslot gegeben, in dem es sein Code abarbeiten kann,  

- **Präventiv/kooperativ**: Ein *präventives* Betriebsystem unterbricht ein Prozess, wenn dieser sein Time-Slot verbraucht hat. Ein *kooperatives* BS unterbicht die Prozesse [nicht]{.underline} und die Prozesse geben an, wann es fertig ist. 