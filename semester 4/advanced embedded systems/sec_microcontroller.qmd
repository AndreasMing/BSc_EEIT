# Systeme

::: callout-important
## Was ist ein *embedded* System?

Ein Rechner (CPU, MCU, etc.) integriert in ein System. Für eine [Aufgabe/Zweck optimiert]{.underline} und meistens **kein** normaler Computer! Meistens von aussen nicht direkt zugreifbar, anders als beim Computer.

Anwendung: Echtzeitsystem, Wetterstation, Steuerung für Roboterarm, etc.
:::

## Transformierende Systeme

Verarbeitet ein Eingabesignal (*Input*) und gibt ein Ausgabesignal (*Output*) aus. Wichtige Charakeristiken:

-   **Verarbeitungsqualität** $\rightarrow$ effiziente Datenverarbeitung
-   **Durchsatz** $\rightarrow$ kleine Latenz zwischen IO
-   **optimierte Systemlast** $\rightarrow$ für die Aufgabe ausgelegt ist **;** nicht überdimensioniert
-   **optimierter Speicherverbrauch** $\rightarrow$ wenig Speicher $\Rightarrow$ langsames System, daher effizienter Speichergebrauch

[Beispiele]{.underline}: Verschlüsselung, Router, Noise Canceling, MP3/MPEG En-/Decoder

![](images/transform_system.png){fig-align="center" width="5cm"}

## Reaktive Systeme

Ein Reaktives System reagiert auf gemessene Werte, also von [externen]{.underline} Events. Diese sind typisch **Echtzeitsysteme.**

-   **kurze Reaktionszeit** garantieren $\rightarrow$ meist in Notfallsituationen verwendet
-   in **Regelkreisen** auffindbar

[Beispiele:]{.underline} Airbag, Roll-Over Detection, ABS, Brake Assistance, Engine Control, Motorsteuerung

![](images/reactive_system.png){fig-align="center" width="5cm" height="1.8cm"}

## Interaktive Systeme

Interaktive Systeme werden von Benutzer interagiert.

-   **hohe Systemlast** $\rightarrow$ z.B. Auswertung Interaktion auf Benutzeroberfläche
-   **optimiertes HMI** (Human-Machine-Interface) $\rightarrow$ wenn von Benutzer angewendet
-   **'kurze' Antwortzeit**.

[Beispiele:]{.underline} Ticket-Automat, Taschenrechner, Smart-Phone, Fernsehbedienung

![](images/interactive_system.png){fig-align="center" width="5cm" height="1.8cm"}

## Kombiniertes System

Ein kombiniertes System ist, wär hätte es gedacht, eine Kombination von den erwähnten Systemen und anderen.

[Beispiele:]{.underline} Smartphone $\rightarrow$ interaktives Teilsystem für Homescreen- & App-Interaktionen, transformierendes Teilsystem für Audio-Decodierung für Musikhören und weiteren kleineren Teilsystemen.

# Architektur

## Systemaufbau

![](images/architecture\systemaufbau.png)

```{=latex}
\begin{itemize}
  \item[\circled{4}] Production Scheduling (Planung \& Verwaltung einer Produktion)
  \item[\circled{3}] Production Control (Kontrolle von mehreren Prod.-Anlagen)
  \item[\circled{2}] Plant Supervisory (Kontrolle \& Überprüfung über stärkeren Rechner)
  \item[\circled{1}] Direct Control (Mikrocontroller)
  \item[\circled{0}] Field Level (Maschine, Pumpe, Roboter,$\ldots$)
\end{itemize}
```
# Mikrocontroller

## Rechnerarchitektur

### von Neumann Architektur

Gemeinsamer Speicher für Programm & Daten $\rightarrow$ einfacherer Aufbau, Speicher kann flexibel aufgeteilt werden und [universell genutzt]{.underline} werden, **aber** begrenzte Leistung, da CPU nur auf Daten *oder* Programm zugreifen kann.

![](images/paste-18.png){fig-align="center" width="4.4cm" height="1.8cm"}

### Harvard Architektur

Separater Zugriff auf Daten- & Programmspeicher $\rightarrow$ höhere Geschwindigkeit und bessere Sicherheit durch Trennung, **aber** höhere Komplexität

![](images/paste-19.png){fig-align="center" width="7cm" height="1.8cm"}

### System on Chip (SoC)

Ein Baustein der einen Rechner mit möglichst wenigen externen Komponenten realisiert $\rightarrow$ reduziert Platz, Anzahl Bausteine und Kosten, **aber** verschiedene Varianten (über 1000) existieren (nicht immer verfügbar), zusätzliche Bus-Leitungen nötig und Taktraten des CPUs wurden höher (\>1GHz), aber diese der RAM-Speicher sind bei 100MHz stehengeblieben *(Unterschiedliche Fertigungsprozesse)*.

![](images/paste-20.png){fig-align="center" width="8.5cm"}

![](images/paste-21.png){fig-align="center" width="7cm"}

ADC/DAC & SRAM sind Kostentreiber!

::: callout-important
## Speicher sind teuer

Speicher sind teuer und werden in gewissen Fällen sogar weggelassen, bzw. ein externer Speicher ist nötig.

Es gibt Lösungen wie Flashless MCU, XiP (execute in Place), PoP (Package on Package), HyperFlash (ge*cache*ter, schnellerer Flash) und QSPI.
:::

## ARM Cortex Familie

::: callout-note
## Übersicht ARM

-   1990 ARM inc. $\Rightarrow$ 2016 gekauft von SoftBank $\Rightarrow$ 2022 geplatzter Kauf von Nvidia
-   Joint Venture: Acorn Computer + Apple + VLSI Technology
-   IP Schmiede $\Rightarrow$ STM, NXP, TI, Atmel, EM,...
    -   stellt Unterlagen zur Verfügung, aber keine Hardware
-   ARM Produkte: Cortex 32bit/64bit RISC
:::

```{=latex}
\begin{itemize}
  \item[A] ARM Cortex-\textbf{A}pplication
  \item[R] ARM Cortex-\textbf{R}ealtime
  \item[M] ARM Cortex-\textbf{M}icrocontroller
\end{itemize}
```
### Übersicht

$\Longrightarrow$ **Siehe letzte Seiten**

![](images/arm_table.png){width="10cm"}

## Interrupt Vektor Tabelle

### Cortex M4 (TinyK22)

![](images/vector_table_cortex_m4.png){width="7cm"}

\newpage

### Cortex M0/M0+ (LPC845)

![](images/vector_table_cortex_m0.png){width="7cm"}

## SysTick

*SysTick* ist ein 24Bit Timer Interrupt, der von ARM als Zeitbasis für Betriebssysteme vorgesehen ist. Typische Zeiten sind Perioden von **10ms** oder **1ms**. Durch den Tick Interrupt erhält das OS eine Gelegenheit für einen Kontext Wechsel, falls im *preemptive* Modus.

``` cpp
void vPortTickHandler(void) {
  portDISABLE_INTERRUPTS();     /* disable interrupts */
  if (xTaskIncrementTick() != pdFALSE) {  /* increment tick count */
    traceISR_EXIT_TO_SCHEDULER();
    taskYIELD();
  }
  portENABLE_INTERRUPTS();      /* enable interrupts */
}
```

::: callout-note
## SysTick

`xTaskIncrementTick()` gibt `pdTRUE` zurück, falls ein Kontext Wechsel stattfinden soll.

Im non-preemtive Modus ist der Rückgabewert immer `pdFALSE`.
:::

## SVCall

Der *SVC* *(SuperVisor Call)* ist von ARM dafür vorgesehen um OS Kernel oder Gerätetreiberfunktionen aufzurufen. Die `SVCall` Exception wird durch die `SVC <number>` Instruktion ausgelöst, welche über ein zusätzliches Argument *(Zahl)* verfügt.

![](images/3-s2.0-B9781856179638000107-f07-15.jpg)

Durch die übergebene Zahl kann eine spezifische Funktion im Kernel oder im Gerätetreiber aufgerufen werden *(System Trapping)*.

::: callout-note
## SVCall

FreeRTOS nutzt kein *SystemTrapping*. FreeRTOS nutzt nur den Eintrag $0$ um den Scheduler zu starten.
:::

# Cycle Counter

## MCULib

``` cpp
#include "cycles.h" // <1>

CCOUNTER_START(); // <2>
/* do stuff */
CCOUNTER_STOP();
```

1.  Includierung
2.  Anwendung

![](images/paste-24.png){width="8cm" height="4.1cm"}

## DWT

**D**ata **W**atchpoint and **T**race Unit

![](images/paste-23.png){fig-align="center" width="7cm"}

Zählt totale Zyklen (`cycles`) und seit letztem Debug-Step/-Breakpoint (`cycleDelta`)