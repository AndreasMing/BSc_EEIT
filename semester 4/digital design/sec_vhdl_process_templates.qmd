# Vorlagen

Der Inhalt der Prozess-Templates wird in den `=>CUSTOM` gekennzeichneten Abschnitten geschrieben.

## Positive Getriggertes D-FlipFlop

### Mit asynchronem Reset

![](images/paste-20.png){width="2.4cm" height="2cm"}

``` vhdl
process (rst, clk) -- !!!
-- <1>
begin
  if rst = ’1’ then
    Q <= ’0’; -- <2>
  elsif rising_edge(clk) then
    Q <= D; -- <3>
  end if;
end process;
```

1.  Deklarationen
2.  Asynchroner Reset
3.  Getaktete Logik

### Ohne Reset

![](images/paste-19.png){width="2.8cm"}

``` vhdl
process (clk) -- !!!
  -- <1>
begin
  if rising_edge(clk) then
    Q <= D; -- <2>
  end if;
end process;
```

1.  Deklarationen
2.  Getaktete Logik

## Finite State Machine

### Mealy

![](images/fsm_mealy.png)

``` vhdl
-- FSM initialization
type state is (S0, S1, S2);
signal c_st, n_st : state;

-- memorizing process
p_seq: process (rst, clk) -- <1>
begin
  if rst = ’1’ then
    c_st <= S0;
  elsif rising_edge(clk) then
    c_st <= n_st;
  end if;
end process;

-- memoryless process
p_com: process (i, c_st) -- <2>
begin
  -- default assignments
  n_st <= c_st; -- remain in current state
  o <= ’1’; -- most frequent value
  -- specific assignments
  case c_st is
    when S0 =>
      if i = "00" then
        o <= ’0’; 
        n_st <= S1;
      end if;
    when S1 =>
      if i = "00" then
        n_st <= S2;
      elsif i = "10" then
        n_st <= S0;
      end if;
    when S2 =>
      if i = "10" then
        o <= ’0’;
        n_st <= S0;
      elsif i = "11" then
        n_st <= S1;
      end if;
  when others =>
    -- handle parasitic states
    n_st <= S0; 
  end case;
end process;
```

1.  [*Memorizing*]{.underline} (sequentielle Logik)
2.  [*Memoryless*]{.underline} (kombinatorische Logik)

### Moore

![](images/fsm_moore.png)

``` vhdl
-- FSM initialization
type state is (S0, S1, S2);
signal c_st, n_st : state;
```

``` vhdl
-- memorizing process
p_seq: process (rst, clk)                       -- <1>
begin
  if rst = ’1’ then
    c_st <= S0;
  elsif rising_edge(clk) then
    c_st <= n_st;
  end if;
end process;

-- memoryless process
p_com: process (i, c_st)                        -- <2>
begin
  -- default assignments
  n_st <= c_st; -- remain in current state
  o <= ’1’; -- most frequent value
  -- specific assignments
  case c_st is
    when S0 =>
      if i = "00" then
        n_st <= S1;
      end if;
    when S1 =>
      if i = "00" then
        n_st <= S2;
      elsif i = "10" then
        n_st <= S0;
      end if;
      o <= ’0’; -- uncondit. output assignment
    when S2 =>
      if i = "10" then
        n_st <= S0;
      elsif i = "11" then
        n_st <= S1;
      end if;
    when others =>
      -- handle parasitic states
      n_st <= S0;
  end case;
end process;
```

1.  [*Memorizing*]{.underline} (sequentielle Logik)
2.  [*Memoryless*]{.underline} (kombinatorische Logik)

## Synchronisation

### einfach

![](images/paste-8.png){fig-align="center" width="5cm"}

``` vhdl
-- initialize sync signal
signal sync: std_logic_vector(1 downto 0);

-- synchronisation
process (rst, clk)
begin
  if rst = ’1’ then
    sync <= "00";
  elsif rising_edge(clk) then
    sync(0) <= async;
    sync(1) <= sync(0);
  end if;
end process;
```

### mit Flankenerkennung

![](images/paste-9.png){fig-align="center" width="8cm"}

``` vhdl
-- initialize sync signal
signal sync: std_logic_vector(2 downto 0);

-- edge detection
enb <= sync(1) and not sync(2);

-- synchronisation
process (rst, clk)
begin
  if rst = ’1’ then
    sync <= "000";
  elsif rising_edge(clk) then
    sync(0) <= async;
    sync(1) <= sync(0);
    sync(2) <= sync(1);
  end if;
end process;
```

## Entprellen

### durch Blanking & Unterabtastung

![](images/paste-11.png)

``` vhdl
deb_sig : process(clk)
begin
  if rising_edge(clk) then
    if deb_cnt = 0 then
      if (sig /= debncd_sig) then
        deb_cnt <= c_blank_time;
        debncd_sig <= sig;
      end if;
    elsif deb_cnt > 0 then
      deb_cnt <= deb_cnt -1;
    end if;
  end if;
end process;
```

### durch Unterabtastung

![](images/paste-12.png)

``` vhdl
deb_sig : process(clk)
begin
  if rising_edge(clk) then
    if deb_cnt < c_sample_time then
      deb_cnt <= deb_cnt + 1;
    else
      debncd_sig <= sig;
      deb_cnt <= (others => '0');
    end if;
  end if;
end process;
```