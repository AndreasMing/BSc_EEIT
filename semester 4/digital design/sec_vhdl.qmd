# VHDL

::: callout-important
## VHDL?

VHDL steht für ***V**ery High Speed Integrated Circuit **H**ardware **D**escription **L**anguage*, klingt schnell und ist es auch. Diese Sprache dient für die Hardwarebeschreibung von FPGAs, insbesondere wie die "Logikfläche" konfiguriert wird, und ist [keine]{.underline} Programmiersprache, es handelt sich um eine Designsprache.
:::

## Einordnung VHDL als HDL

![](images/paste-1.png)

HW-nahes Design ermöglicht:

\textcolor{OliveGreen}{\textbf{+}} kleinere, schnellere, energie-effizientere Schaltungen als ESL-Design

\textcolor{BrickRed}{\textbf{-}} auf Kosten der Entwicklungszeit.

## Entwicklung

### Designflow

1.  **Spezifikation**
    -   Erstellen/Verstehen von Funktions- und Testspezifikation. Vorgaben zum strukturellen Aufbau des Designs.
2.  **Architektur-Entwurf**
    -   Schaltung wird in Blockdiagramm festhalten $\rightarrow$ Ableiten von Ports, Wortbreiten, Codierung
    -   Je nach Komplexität Erstellung von Prozess-Dokumentation und/oder RTL-Schemas
    -   Zustandsdiagramm der FSMs
3.  **VHDL Implementierung**
    -   Verwendung von VHDL-Templates für synchrone Logik
    -   VHDL-Code kommentieren
4.  **Design Constraints**
    -   in `.xdc`-File *Top-Level Ports Location* & *Clock Period* Constraints setzen.
5.  **Probe-Synthese**
    -   VHDL-Code überarbeiten bis keine Warnungen $\rightarrow$ *Found latch for signal...*, *...signals missing in the process sensitivity list...*, ...*signals form a combinational loop...*
    -   Konsistenz-Check anhand Vergleich selbst gezählte #FF und Synthese-#FF
6.  **Simulation**
    -   Erstellen einer VHDL-Testbench und Simulation des Designs (MUT) gemäss Spezifikation
    -   Testbench mit automatischem Vergleich von Ist & Soll ist für komplexere Designs gut
7.  **FPGA Implementierung**
    -   *Run Implementation* ausführen für *Technology-Optimizations* & *Place&Route*
    -   Falls Timinganalyse Fehler $\rightarrow$ Architektur überprüfen
8.  **HW-Test**
    -   Bitstream auf HW gemäss Spezifikationen testen.

![](images/Workflow.png)

## Simulation

::: callout-caution
### Problem

Wie kann Parallelität auf einem sequentiell arbeitenden Computer simuliert werden? $\rightarrow$ Event Queue & Transactions
:::

![](images/paste-3.png)

![](images/paste-4.png){width="7cm"}

### Event Driven Simulation

1.  Vorrücken der Simulationszeit zur nächsten Transaktion in der Event Queue.
2.  Setzt alle zu aktualisierenden Signale auf den mit der aktuellen Transaktion verbundenen Wert.
3.  Arbeitet alle Prozesse ab, die auf Signale sensitiv sind, deren Wert sich durch die aktuelle Transaktion geändert hat. Signalzuweisungen werden als zukünftige Transaktionen in die Event Queue abgelegt.

::: callout-important
-   Events werden durch die Signaländerung generiert, [nicht]{.underline} die Transaktionen!
-   Nicht alle Transaktionen führen zu einem Event *(Sensitivity List)*
:::

### Signale & Variablen

-   Variable Assignment `:=` $\rightarrow$ unabhängig von Simulation, [Effekt ist sofort]{.underline}
-   Signal Assignment `<=` $\rightarrow$ Effekt nach `after` ([nur]{.underline} Simulation) oder bei keiner Verzögerung nach Simulationszyklus ($\delta$-Delay ; Sim. & Synth)

``` vhdl
-- <1> simulation only
sigA <= '1',
        '0' after 1 ms,
        'Z' after 10 ms;

-- <2> simulation & synthesis
sigB <= '1';
```

1.  Effekt nach `after` ([nur]{.underline} Simulation)
2.  Bei keiner Verzögerung (Synthese & Simulation)$\rightarrow$ Transaction für nächsten Simulationszyklus geplant ($\delta$-Delay)

## Sprachelemente

### Bezeichner

z.B. Signaldeklaration oder Port-Variable

-   Gross-/kleinschreibung wird nicht unterschieden $\rightarrow$ [nicht]{.underline} case-sensitiv

``` vhdl
signal some_signal, some_other_signal, result : integer;

ReSULT <= SOME_SIGNAL + sOME_oTHer_SIGNal;
```

-   Namen können beliebig lang sein
-   Keine Spezialzeichen ausser `_` $\rightarrow$ nicht am Anfang & Ende + nicht verdoppelt

### Signalzuweisung / Treiber `<=`

Mit dem *Treiber* `<=` werden Signale von der rechten Seite ausgewertet und auf das Signal auf der linken Seite zugewiesen.

``` vhdl
Inv_Out <= not Inv_In; -- Inverter: Das Signal Inv_In "treibt" Signal Inv_Out
```

::: callout-caution
### Kontext

Je nachdem wo `<=` verwendet wird, hat es eine andere Bedeutung $\rightarrow$ in einem `if`-Statement wird es als kleiner-gleich angesehen ; bei Signalen als Treiber.
:::

### Kommentare

Mit `--` werden Kommentare begonnen $\rightarrow$ [single line]{.underline} comments!

``` vhdl
-- Das hier ist ein Kommentar
Hier aber nicht mehr :(
```

## Komponenten

### `.vhd`-Dateistruktur

VHDL-Code wird meistens in `.vhd` Dateien geschrieben.

``` vhdl
-- Header Commment (Author, Date, Filename, etc.)
library ... -- Library einbinden
use ... -- Packages aus Library bekanntgeben
entity ...
-- Schnittstelle der Komponente gegen aussen
architecture ...
-- Funktion (Innenleben) der Komponente
```

### Entity {#sec-entity}

Eine Entity beschreibt den Komponenten für äusserliche Zugriffe $\rightarrow$ nur [Struktur der Komponente]{.underline} bekannt, aber [nicht]{.underline} deren [Inhalt]{.underline}.

``` vhdl
entity MyComponent is
  generic( -- <1>
    y : integer := 20; 
    z : integer
  );
  port ( -- <2>
    a_pi, b_pi : in    std_logic; -- Input
    c_po       : out   std_logic; -- Output     
    --x_pio    : inout std_logic  -- Bidirectional
  );   
  constant c_max_cnt : integer := 20_000; -- <3>
end MyComponent;
```

1.  Analog zu `#define` in C $\rightarrow$ werden während Kompilation eingefügt! "Ko"
2.  Signal Deklarationen $\rightarrow$ **müssen** bei Instanziierung des Komponenten im übergeordneten Design verdrahtet werden!
3.  Konstanten können mit Generics interagieren (Wert ausrechnen und an Konstante zuweisen) $\rightarrow$ während Laufzeit [nicht]{.underline} veränderbar!

::: callout-warning
### Sichtbarkeit

-   Alles was in der Entity bekannt ist (inkl. Libraries), ist auch in der zugehörigen Architecture bekannt.
-   Alles was in der Architecture bekannt ist, ist [nicht]{.underline} in der Entity bekannt.
:::

### Generics

> Analog zu C Preprocessor Direktive `#define`

Mit `generic` können Komponenten angepasst/parametrisiert werden $\rightarrow$ Komponent muss daher mit diesen Generics implementiert werden.

Im Gegensatz zu Konstanten kann Wert [ausserhalb]{.underline} definiert werden.

Beim Testen sollten mit Generic-Parametern die Randwerte verifiziert werden (*Corner-Case* Testing).

**Beschreibung der Komponente**

``` vhdl
entity NAND_gate is
  generic(
    IW : integer := 2 -- input width, def. 2
  );
  port(
    InP  : in std_logic_vector(IW-1 downto 0);
    OutP : out std_logic;
  );
end NAND_gate;
```

**Verwendung der Komponente**

``` vhdl
architecture rtl of top is

component NAND_gate is
  generic(IW : integer := 3);   -- default
  port(
    InP : in std_logic_vector(IW-1 downto 0);
    OutP : out std_logic;  
  );
end component NAND_gate;

begin
I1 : NAND_gate
port map (
  InP => In1,
  OutP => O1
);

I2 : NAND_gate
generic map (
  IW => 8     -- Instance 2 has 8 inputs
) -- note no semicolon
port map (
  InP => In1,
  OutP => O1
);

end logic;
```

### Loop & Generate Statements

Bei Implementierung von Komponenten mit Generic-Parametern werden häufig `loop` oder `generate` verwendet.

``` vhdl
-- architecture using loop statement
architecture A_loop of NAND_gate is
begin
  P_nand: process(InP)
    variable tmp : std_logic;
  begin
    tmp := InP(0);
    for i in 1 to IW-1 loop
      tmp := tmp and InP(i);
    end loop;
    OutP <= not tmp;
  end process;
end A_loop;

-- the same is achieved with generate statements
architecture A_gen of NAND_gate is
signal tmp : std_logic_vector(IW-1 downto 0);
begin
  tmp(0) <= Inp(0);
  tree: for i in 1 to IW-1 generate
    tmp(i) <= tmp(i-1) and Inp(i);
    invert: if i = IW-1 generate -- <1>
      Outp <= not tmp(i);
    end generate;
  end generate;
end A_gen;
```

1.  `generate`-Statements können auch in *if*-Form verwendet werden (zum Ein- oder Ausschalten von Code-Blöcken.

### Ports

Die Richtung der Ports werden mit `in`, `out` und `inout` bezeichnet.

### Architektur

Architecture beschreibt die Implementation oder das Innenleben des Komponents. Darin wird beschrieben, wie die deklarierten Signalen miteinander interagieren.

``` vhdl
architecture a1 of MyComponent is -- <1>
  -- Deklarationen (Signale, Komponenten)
  signal tmp : std_logic; -- <2>
begin
  tmp  <= a_pi or b_pi; -- <3>
  c_po <= tmp;
end a1;
```

1.  Siehe @sec-entity
2.  **Deklarationen** (für Signale & Komponenten)
3.  **Implementierung**

::: callout-note
#### `rtl` & `struct`

Der Name `rtl` wird verwendet, um grundlegende Logik-Komponenten zu definieren, wie zum Beispiel *OR*, *XOR*, *AND*, etc. `struct` beinhaltet eine Kombination/Anwendung von `rtl`-Komponenten.
:::

### Benutzung bestehender VHDL-Komponenten

![](images/example_component_usage.png){fig-align="center" width="7cm" height="3.7cm"}

``` vhdl
entity top is
  port (
    c_po : out std_logic;
  );
end top;

architecture struct of top is
  signal a,b : std_logic;
  component MyComponent is -- <1>
    port (
      a_pi, b_pi : in  std_logic;
      c_po       : out std_logic;
    );
  end component MyComponent;
begin

  Inst1: MyComponent -- <2>
  port map ( a_pi => a, -- <3>
             b_pi => b,
             c_po => c_po
            ); -- <4>
end struct;
```

1.  Deklaration der Komponente im Deklarationsteil $\rightarrow$ [Name der entsprechenden Entity]{.underline}!
2.  Instanzierung eines Komponenten
3.  Signale/Ports werden verbunden
4.  Kein Endzeichen!

Es gibt allerdings eine Kurzschreibweise die angewendet werden kann, wenn sich die Komponente im *selben Verzeichnis* befindet

``` vhdl
architecture struct of top is
  -- external module
  use work.MyComponent;

begin
  Inst1: entity work.MyComponent
    port map(
      a_pi => a,
      b_pi => b,
      c_po => c_po
    );
end struct;
```

## Datentypen

+----------------------------------------+-------------------------------------------------+
| Synthese & Simulation                  | Nur Simulation                                  |
+========================================+=================================================+
| `std_logic`, `std_ulogic` (IEEE 1164)\ | `real`, `time`, `character`, `file` (IEEE 1076) |
| `signed`, `unsigned` (IEEE 1176.3)\    |                                                 |
| `integer` (IEEE1076)\                  |                                                 |
| `type` (IEEE 1076 userdefined)         |                                                 |
+----------------------------------------+-------------------------------------------------+

: {tbl-colwidths="\[50,50\]"}

### Integer

``` vhdl
signal my_int : integer range -128 to 127;
```

-   Repräsentiert Bereich $-2^{31}\ldots2^{31}-1$
-   \textcolor{BrickRed}{\textbf{!!!}} Wertebereich einschränken (Konsistenzcheck für Simulation)
-   Zahlen Darstellungen

``` vhdl
my_int <=    61;      -- Dezimal (Default)
my_int <= 10#61#;     -- dezimal
my_int <=  2#111101#; -- binär
my_int <=  8#75#;     -- octal
my_int <= 16#3D#;     -- hexadezimal
```

### Aufzählungstypen

Aufzählungstypen sind wie `enum` in C, wobei die Repräsentierung hinter den Aufzählunstypen nicht bekannt ist.

::: callout-warning
# Reservierte Wörter

Für Aufzählungstypen dürfen keine reservierten Wörter verwendet werden. Im folgenden Beispiel wäre also `port` keine möglicher Wein, da dies ein reserviertes Wort ist.
:::

``` vhdl
type wine is (white, rose, red);
signal beverage : wine := red;  -- initialization
```

### Subtypes

gleiche Operationen wie Grundtype, einfach bestimmte Teilmenge (z.B. `natural`, `positive`)

``` vhdl
subtype t_day is integer range 1 to 31;
signal day : t_day;
```

### Array

Gruppierung von Elementen gleichen Types

```         
type t_byte is array (7 downto 0) of std_logic;
signal byte : t_byte; -- same as below
signal byte : std_logic_vector(7 downto 0);
```

::: callout-note
#### Attributes `A'<atr>(N)`

Mit den Attributes eines Arrays können verschiedene Informationen entnommen werden, welche während der Synthetisierung eingefügt werden (analog zu C Preprozessoren).

``` vhd
-- Initialise array(1. Dim, 2. Dim)
type t_arr is array(2 to 4, 15 downto 0) of std_logic;
signal A : t_arr;

A'left(1)          -- 2
A'right(2)         -- 0
A'high(2)          -- 15
A'low(2)           -- 0
A'range(1)         -- 2 to 4
A'reverse_range(2) -- 0 to 15
A'length(1)        -- 3
A'ascending(2)     -- false
A'element          -- std_logic
```
:::

::: callout-note
#### Aggregates

Array Aggregates werden verwendet, um Arrays mit konstanten Werten einzusetzen.

``` vhdl
type t_map is array(1 to 4) of std_logic;
-- positional association
constant c_map : t_map := ('Z', '0', '0', '1');
-- named association
constant c_map : t_map := (1=>'Z', 2=>'0', 3=>'0', 4=>'1');
constant c_map : t_map := (1=>'Z', 2|3=>'0', others =>'1');
```

\textcolor{BrickRed}{Zuordnungen dürfen nicht gemischt werden!}

``` vhdl
-- !ERROR!
constant c_map : t_map := ('1', 2=>'0', others => '1')
```
:::

Die Indexierung von Arrays erfolgt analog zu C

``` vhdl
t_sync_arr is array(0 to 1) of std_logic_vector(3 downto 0);

t_sync_arr(0);                  -- <1>
t_sync_arr(1);                  -- <2>
t_sync_arr(1)(2);               -- <3>
t_sync_arr(1) <= t_sync_arr(0); -- <4>
```

![](images/paste-21.png){width="3cm"}

### Record

Gruppierung von Elementen unterschiedlichen Types

``` vhdl
type t_date is record
  day  : t_day;
  year : positive;
end record;
```

### Signed/Unsigned (IEEE 1076.3)

Binärzahlen in Form von 2er-Komplement, bzw. vorzeichenlosen Binär-Arrays

::: callout-important
#### Unterschied Signed/Unsigned und Integer

`integer` ist ein Skalar-Typ und fest in VHDL eingebaut. Obwohl der Typ der Zahlenbereich einer 32-Bit 2er-Komplementzahl hat, hat es keine Tool-interne Darstellung (z.B. MSB ist nicht prüfbar).

`unsigned/signed` sind definiert im Package `numeric_std` und haben eine genau definierte Darstellung, als Array von `std_logic` bits mit bekannten Definierung von MSB & LSB.
:::

#### Umwandlungstabelle

![](images/paste-5.png){fig-align="center" width="8cm"}

### IEEE `std_logic_1164`

Datentypen: `std_logic` & `std_ulogic`

::: callout-note
### Warum `std_logic_1164`?

In Standard-VHDL gibt es zwei binäre Datentypen: `bit` (`0`,`1`) und `boolean` (`false`, `true`) $\rightarrow$ entspricht aber nicht realen digitalen Signalen!
:::

![](images/paste-2.png){fig-align="center" width="2.8cm"}

+----------------+-------------------------+----------------------+
| State          | Bedeutung               | Bereich              |
+:==============:+:========================+======================+
| `'U'`          | Uninitialized (--)      | Simulation           |
+----------------+-------------------------+----------------------+
| `'X'`          | Forcing Unknown (S1,S3) | Simulation           |
+----------------+-------------------------+----------------------+
| `'0'`          | Forcing Low (S3)        | Synthese, Simulation |
+----------------+-------------------------+----------------------+
| `'1'`          | Forcing High (S1)       | Synthese, Simulation |
+----------------+-------------------------+----------------------+
| `'Z'`          | High Impedanz (--)      | Synthese, Simulation |
+----------------+-------------------------+----------------------+
| `'W'`          | Weak Unknown ()         | Simulation           |
+----------------+-------------------------+----------------------+
| `'L'`          | Weak Low (S4)           | Simulation           |
+----------------+-------------------------+----------------------+
| `'H'`          | Weak High (S2)          | Simulation           |
+----------------+-------------------------+----------------------+
| `'-'`          | Don't Care              | Simulation           |
+----------------+-------------------------+----------------------+

\textsubscript{-- bedeutet alle Schalter offen}

::: callout-caution
`\texttt{std\_\textcolor{BrickRed}{u}logic}`{=latex} steht für `\textcolor{BrickRed}{\textit{u}}`{=latex}*nresolved* $\rightarrow$ Signal kann nur von einem Prozess geändert werden!

------------------------------------------------------------------------

`std_logic` ist *resolved* und kann von mehreren Prozessen geändert werden. Zustände werden mit der *Resolution Table* aufgelöst.

Wird dies gemacht, Simulation möglich, aber [keine]{.underline} Synthetisierung!

![](images/ResolutionTable.png)
:::

### Real (Simulationstype)

$\rightarrow$ Wertebereich ist Hersteller-spezifisch

``` vhdl
signal float : real;
float <= 73_000.0;
float <= 7.3E4;
float <= 73000; -- <1>
```

1.  Fehler, da `730000` eine Ganzzahl ist

### Time (Simulationstyp)

$\rightarrow$ einziger vordefinierter physikalischer Datentyp

``` vhdl
type time is range –2147483647 to 2147483647
  units fs;
    ps = 1000 fs;
    ns = 1000 ps;
    us = 1000 ns;
    ms = 1000 us;
    sec = 1000 ms;
    min = 60 sec;
    hr = 60 min;
  end units;

signal t : time
t <= now + 2.5 sec; -- <1>
```

1.  `now` liefert aktuelle Simulationszeit

## Prozesse

::: callout-important
### Parallelität

In VHDL wird das Verhalten digitaler HW durch parallele Prozesse beschrieben die gleichzeitig ausgeführt werden und über Signale miteinander kommunizieren.
:::

``` vhdl
P1: process (i1, i2, i3) -- <1>
variable v_tmp : std_logic; -- <2>
begin
  v_tmp := ’0’;
  if i1 = ’1’ and i2 = ’0’ then v_tmp := ’1’; end if;
  o1 <= v_tmp and i3; -- <3>
  o2 <= v_tmp xor i3; -- <3>
end process P1;
```

1.  Prozess mit *Sensitivity List* & Spitznamen
2.  Lokale Variablen (Scope innerhalb P1)
3.  Prozess P1 treibt Signale `o1` & `o2`

::: callout-note
### Sensitivity List

Prozesse können mit Hilfe einer *Sensitivity List* auf ausgewählte Signale [sensitiv]{.underline} gemacht werden $\rightarrow$ Prozess reagiert nur auf diese Signale!

\textcolor{BrickRed}{\textbf{!}} Prozesse müssen nicht auf alle ihre Inputsignale sensitiv sein! \textcolor{BrickRed}{\textbf{!}}
:::

::: callout-caution
In synthetisierbaren VHDL Code darf [jedes Signal nur von einem Prozess getrieben werden]{.underline}.

Tristate-Leitungen können simuliert werden, aber [nicht synthetisiert]{.underline}.
:::

### Arten von Prozessen

``` vhdl
sigA <= not sigB -- <1>
stud <= happy     when mep >= C else -- <2> 
        satisfied when mep >= E else
        sad;
with season select -- <3>
holiday <= seaside when summer,
           skiing when winter | spring,
           none when others;
process -- <4>
begin
end process;
```

1.  Concurrent Signal Assignment (komb.)
2.  Conditional Signal Assignment (komb.)
3.  Selected Signal Assignment (komb.)
4.  Process Statement (komb./seq.)

![](images/process_types.png){width="7.5cm"}

### `wait` (nur für Simulation)

Mit dem Keyword `wait` kann ein Prozess pausiert und/oder sensitiv gemacht werden. **NUR FÜR SIMULATION!**

``` vhdl
wait;           -- infinite loop
wait on s1, s2; -- wait on event from s1 or s2
wait until s1 = '1'; -- wait until condition is fulfilled
wait for 1 ms; -- wait stated time
```

+------------------------------+-----------------------+
| [Nur]{.underline} Simulation | Simulation & Synthese |
|                              |                       |
| ``` vhdl                     | ``` vhdl              |
| process                      | process(sigA)         |
| begin                        | begin                 |
|   sigB <= sigA;              |   sigB <= sigA;       |
|   wait on sigA;              | end process;          |
| end process;                 | ```                   |
| ```                          |                       |
+------------------------------+-----------------------+

: {tbl-colwidths="\[50,50\]"}

## Process Statement

::: callout-important
Ein Process Statement ist parallel nach aussen und sequentiell im Inneren.

Alle Signal Assignments ausserhalb von `process` (Concurrent-, Selected-, Conditional-Signal Assignment) sind [Process Statements in Kurzschreibform]{.underline}!
:::

### Sequential Statements

Innerhalb eines Process sind alle Statements [sequential statements]{.underline}

+--------------------------------------+---------------+
| (sequential) signal assignment       | `<=`          |
+--------------------------------------+---------------+
| variable assignment                  | `:=`          |
+--------------------------------------+---------------+
| `if`, `case`, `for`, `loop`, `while` | \-            |
+--------------------------------------+---------------+
| **nur für Simulation:\               | \-            |
| **`wait`, `assert`, `report`         |               |
+--------------------------------------+---------------+

Folgende beschreibungen resultieren in der selben implementierungen auf dem FPGA.

``` vhdl
stud <= happy     when mep >= C else
        satisfied when mep >= E else
        sad;

P1: process (mep)
begin
  if mep >= C then
    stud <= happy;
  elsif mep >= E then
    stud <= satisfied;
  else
    stud <= sad;
  end if;
end process P1;
```

# Schaltungssynthese

## Synthese

1.  Synthese übersetzt VHDL-Modell in eine RTL-Beschreibung aus Registern und kombinatorischen Blöcken
2.  Erzeugung von Netlist $\rightarrow$ Verbindungen von Elementen (Primitives), welche in den Slices verfügbar sind.

## Implementation

1.  **Initialize** $\rightarrow$ Einbindung Constraints & Netlist ins Design
2.  **Optimize** $\rightarrow$ Packt Primitives der synth. Netlist in Slices, Versuch Gatterkomb. zu vereinfachen (Reduktion HW)
3.  **Place** $\rightarrow$ Zuweisung der Slices auf CLBs (configurable logic blocks) auf dem FPGA, Zuordnung IO aus Constraints
4.  **Route** $\rightarrow$ Definiert Verbindungen zwischen CLB & IO
5.  **Static Timing Analysis** $\rightarrow$ Überprüfung des Designs mit den Timing Constraints.

::: callout-important
### Synthesis vs. Implementation

-   *Synthesis* generiert die Netlist des VHDL-Codes und beschreibt die Zusammensetzung
-   *Implementation* wendet die Contraints an und sorgt für die Hardware-Implementierung
:::

### Bitstream

Die Bitstream-Generierung erzeugt das FPGA-Konfigurationsfile ('kompilierte Datei').

## Speichermodellierung

::: callout-tip
## Speichergrössen

$$
1\text{ Kbit} = 2^{10}\text{ bit}
$$

$$
1\text{ KByte} = 2^3\cdot2^{10}\text{ bit}
$$

$$
1\text{ MByte}=2^3\cdot2^{20}\text{ bit}
$$
:::

Adressierbare ROM & RAM können im FPGA aufgebaut werden aus: Slice-Logik (LUTs, FF), speziellen Makrozellen (BRAM) und Konfigurations-RAM (Distributed Memory).

-   RAMs im FPGA sind immer getaktete/synchrone Speicher
-   ROMs können auch kombinatorisch sein falls keine Latenz besteht
-   Nur kleine Speicher sollte man in *behavioural* VHDL beschreiben

### kombinatorisch ROM

``` vhdl
library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.Numeric_Std.all;

entity crom is
  generic(
    AW : integer := 3; DW : integer := 8);
  port (
    addr : in
    std_logic_vector(AW-1 downto 0);
    Dout : out std_logic_vector(DW-1 downto 0)
  );
end entity crom;

architecture Behav of crom is
  type t_rom is array (0 to 2**AW-1) of
  std_logic_vector(DW-1 downto 0);
  constant rom : t_rom := (X"1A", X"1B", X"1C", X"1D",
                           X"2A", X"2B", X"2C", X"2D");
begin
  Dout <= rom(to_integer(unsigned(addr)));
end architecture Behav;
```

$$
C = 2^{AW}\cdot DW = 2^{10}\cdot \underbrace{x}_{[\text{kBit}]}
$$

```{=latex}
\begin{conditions}
  C & Speicherkapazität in $[Bits]$ oder $[kBits]$\\
  AW & Adresswortbreite \\
  DW & Datenwortbreite
\end{conditions}
```
[Beispiel ROM]{.underline}

$$
\begin{array}{l}
C_{ROM} = 2^3\cdot 8 = 64 \text{ Bits} \\
\rightarrow \#FF = 0\text{ (da asynchron)}
\end{array}
$$

### Synchrones ROM "Write before Read"

::: callout-important
## WBR & RBW

Bei *Write-Before-Read* wird zuerst geschrieben und dann das Beschriebene gelesen.

Bei *Read-Before-Write* wird zuerst die Speicherstelle ausgelesen und erst dann die Stelle überschrieben.

![](images/ram_read_write_modes.png){width="6cm"}

Folgende RTL-Schema beschreiben ein WBR & RBW Speicher mit 1cc oder 0cc Latenz.

![](images/RAM_WbR1.png)

![](images/RAM_RbW1.png)

![](images/RAM_RbW0.png)
:::

``` vhdl
entity sram is
  generic(
    AW : integer := 4; DW : integer := 8);
  port (
    clk  : in std_logic;
    we   : in std_logic;
    addr : in std_logic_vector(AW-1 downto 0);
    Din  : in std_logic_vector(DW-1 downto 0);
    Dout : out std_logic_vector(DW-1 downto 0)
  );
end entity sram;

architecture Behav of sram is
  type t_ram is array (0 to 2**AW-1) of
    std_logic_vector(DW-1 downto 0);
  signal ram : t_ram;
  signal r_addr : std_logic_vector(AW-1 downto 0);
begin
  P_ram: process(clk)
  begin
    if rising_edge(clk) then
      if we = ’1’ then
        ram(to_integer(unsigned(addr))) <= Din;
      end if;
      r_addr <= addr;
    end if;
  end process;

  Dout <= ram(to_integer(unsigned(r_addr)));
end architecture Behav;
```

[Beispiel RAM]{.underline}

$$
\begin{array}{l}
C_{RAM} = 2^4\cdot 8 = 128 \text{ Bits} \\
\rightarrow \#FF = \underbrace{4}_{\text{AW}} + \underbrace{128}_{\text{Speicher}} = 132\text{ FF}
\end{array}
$$