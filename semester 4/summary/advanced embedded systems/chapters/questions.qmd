# Fragen

## SW01 Einführung

### Administratives
1. Was bedeutet *Embedded*?

*Embedded* bedeutet 'eingebettet' und weist darauf hin, dass ein Komponente oder Objekt Teil eines Ganzen ist.

2. Was ist ein *Embedded System*?

*Embedded Systems* bestehen aus Rechner (zum Beispiel Mikrocontroller), welche in einem grösseren System 'eingebettet' sind, also Teil eines Ganzen. Obwohl diese Rechner sind, sind diese nicht als 'normale' Rechner wie ein Desktop Computer oder Laptop erkennbar. Diese besitzen keine typischen Merkmale, wie Bildschirm, Maus, Tastatur, sondern sind für einen speziellen Zweck optimiert.
Durch die Spezialisierung besitzt meistens ein Embedded System beschränkte Ressourcen oder sind auf gewisse Faktoren wie Grösse, Kosten oder Energieverbrauch ausgelegt.

3. Was bedeutet *IPC*?


4. Beurteile, ob ein Raspberry Pi ein *Embedded System* ist.

Ein Raspberry Pi kann für beide Fälle verwendet werden, entweder als ein Modul in einem System, welche zum Beispiel Bildverarbeitung für ein Bilderkennungssystem macht, oder als Desktop Computer verwendet werden.
Es kann als beides bezeichnet werden.

5. Erkläre, was man unter *Build Tools* versteht.


### Software & Tools
1. Eclipse ist eine sehr universell einsetzbare IDE, was vielleicht auch problematisch sein kann. Was wären mögliche Kritikpunkte?


2. Was hat wohl wesentlich dazu beigetragen, dass Eclipse als Open Source Projekt erfolgreich wurde?


3. Was ist die Rolle einer Foundation wie die der für Eclipse? Inwiefern unterscheidet sich eine Foundation von einer Firma wie IBM?


4. Hersteller bieten oft ’Eval Boards’ an (ähnlich wie das tinyK22). Was ist der Sinn und Zweck davon?


5. Welche Komponenten finden Sie typischerweise in einem SDK?


6. Das Raspberry Pi ist weder das beste, schnellste, modernste noch das billigste Board, trotzdem ist es ein Erfolg. Was könnten die Erfolgsfaktoren sein?

Die Raspberry Foundation legt grossen Wert auf die Dokumentationen ihrer Geräte/Produkte. Die Datenblätter & andere Dokumentation sind sehr detailliert beschrieben und besteht ebenfalls aus vielen Anleitungen, wie man den Raspberry Pi.  

7. Was ist der Grund, dass man im Pins Tool für einen Pin einen Identifier verwendet?

Damit im Code nicht mit *Magic Numbers* gearbeitet wird, also im Sinne dass man direkt sieht, mit welchem Pin man es zu tun hat.

8. Sie wollen von Ihrer Firma ein Projekt in die Open Source Domäne ’entlassen’. Was müssten Sie dabei berücksichtigen, damit es ein Erfolg wird?

Es sollte ein Projekt sein, dass auch nützlich sein sollte. Ein kleines Marketing um das Projekt und auch eine einfache zugreifbare Plattform, wo das Projekt heruntergeladen werden kann.

9. Sie realisieren ein neues Embedded System: Was ist der Unterschied zwischen *Design* und *Architektur*?


10. Für welche Anforderungen oder Anwendungen eignet sich eher ein FPGA als ein Mikrocontroller? Was sind die Gründe dafür?


11. Was versteht man unter einer Debug Probe?


12. Was ist *CMSIS-DAP*?


13. Was ist *CMSIS*?


## SW02 Architektur
### System
1. Nenne drei gute Beispiele eines transformierenden Systems.

2. Nenne drei gute Beispiele eines reaktiven Systems.

3. Nenne drei gute Beispiele eines interaktiven Systems.

4. Inwiefern unterscheiden sich transformierende Systeme von reaktiven Systemen?

5. Beschreibe ein gutes Beispiel eines transformierenden Systems, welches über einen Eingabestrom und zwei Ausgabeströme verfügt.

6. Gibt es ein Beispiel eines Embedded Systems ohne Benutzerschnittstelle?

7. Zu welcher System Klasse gehört ein ’Embedded System’?

8. Viele Systeme sind eine Kombination von transformierenden, reaktiven und interaktiven Systemen. Bestimme diese am Beipsiel eines Smartphone

9. Wieso ist die Verarbeitungsqualität für transformierende Systeme so wichtig?

10. Wieso sind transformierende Systeme typischerweise optimiert für eine optimale Systemausnutzung?

11. Interaktive Systeme sind typischerweise optimiert für eine schnelle Antwortzeit. überlege typische Antwortzeiten für interaktive Systeme geben: Wovon hängen diese ab?

12. Was bedeutet ’Verarbeitungsqualität’ bei einem Audio Encoder System?

13. Klassifiziere die folgenden Systeme nach reaktiv, interaktiv und transformativ: Digital-Uhr, Airbag, Polizei-Radar, Feuer Alarmsystem, Geldautomat, Tankanzeige im Flugzeug.

14. Nenne einige Systeme, welche keinen Computer oder Mikroprozessor verwenden.

15. Mit mehr Speicher k¨onnen Systeme oft schneller rechnen. Probiere Beispiele dazu zu finden.

### Rechner
1. Ist ein Intel basiertes Notebook eher eine von Neumann oder Harvard Architektur?

2. Ist der Instruktionssatz des tinyK22 CISC oder RISC?

3. Wie kann eine RISC Architektur einen Rechner beschleunigen, da doch dabei mehr Instruktionen ausgeführt werden müssen?

4. Wieso eignen sich SIMD Instruktionen vor allem für Signalverarbeitung?

5. Was sind die Grenzen eines SoC Ansatzes, und wie können diese überwunden werden?

6. Wieso benötigt man ein XiP Verfahren bei einem externen Programmspeicher? Hinweis: Adressbereiche.

### Cortex
1. Eine Anwendung verwenden viele 32bit Multiplikationen und Divisionen. Eignet sich ein ARM Cortex-M0+ dafür? Was sind Alternativen?

2. Was ist der Grund, dass beim M7 oft ein externer Speicher zum Einsatz kommt?

3. Wieso ist eine MMU für den Einsatz eines Linux nötig?

4. Wieso wurde ARM mit den ARM11 so erfolgreich?

5. Der M3 war und ist sehr erfolgreich. Was waren die Gründe für den M0 und M4?

6. Was ist das Konzept von TrustZone?

7. Was ist der Unterschied zwischen einer MPU und einer MMU?

8. Bringe ein Beispiel für eine Sättigungsarithmethik.

9. Welche Schlüsseleigenschaften wurden von welchen Firmen in die Gründung des ARM Joint Venture eingebracht und von wem?

10. Wieso wurde die mögliche Übernahme von ARM durch Nvidia kontrovers diskutiert?

11. Was sind die wichtigsten Erfolgsfaktoren von ARM Prozessoren aus Sicht der Anwender?

12. Was könnte ein guter Kritikpunkt an ARM und deren Prozessoren sein? Gibt es Alternativen?

13. RISC-V ist in ’aller Munde’: Beschreibe in ein paar kurzen Sätzen was RISC-V ist.

14. Welcher Vorteil hat Arm gegenüber einer Konkurrenz wie Intel?

15. Ein Temperatur Sensor unterstützt einen Temperaturbereich von -45 Grad Celsius bis 125 Grad Celsius mit einer Auflösung von 0.1 Grad? Ist dafür eine Gleitkomma-Repräsentation mit den zugehörigen Operationen angebracht? Was wäre eine Möglichkeit?

## SW03 Entwicklung
### Prozess
1. Was ist der Unterschied zwischen Verifikation und Validierung? Erläutere es mit einem Beispiel.

2. Erkläre den Unterschied zwischen Unit Test, Integration Test und System Test?

3. Wieso geht die Phase der Ausserbetriebnahme eines Produktes oft vergessen? Was sind mögliche Konsequenzen?

4. Das Wasserfall Modell wird oft als ’schlecht’ dargestellt? Ist das berechtigt?

5. Welche grundlegenden Vorteile führt das V Modell gegenüber dem Wasserfall Modell ein?

6. Welche Anforderungen stellt das Agile Modell an das Entwicklungsteam?

7. Unter welcher Annahme wird das Agile Modell nur einmal durchlaufen?

8. Wieso braucht es beim Agile Modell ein Backlog?

### Werkzeuge
1. Was versteht man unter einem Refactoring und was ist das Ziel davon?

2. Was ist der Unterschied zwischen Coverage und Profiling?

3. Was ist der grosse Vorteil von statischen Analyse Werkzeugen gegenüber den dynamischen?

4. Welcher Vorteil ergibt eine Commit Phase mit einem VCS?

5. Gib ein Beispiel, wo es schwierig ist eine 100% Coverage zu erreichen?

## SW04 Firmware
### Architektur
### Module
### Bibliotheken

## SW05 RTOS
### Echtzeit
### FreeRTOS
### Archtiektur
### Kernel API
### Tasks

## SW06 Kernel
### Interrupts
### Visualisierung

## SW07 Synchronisation
### Synchronisierung
### FreeRTOS & Interrupts

## SW08 Nachrichten
### Queues
### Timer

## SW09 Parallelität
### Reentrancy
### Sema

## SW10 Benutzer
### Benutzerschnittstellen

## SW11 Grafik
### Graphical User Interface
