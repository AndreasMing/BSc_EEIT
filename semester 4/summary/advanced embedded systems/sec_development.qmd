# Entwicklung

## Cross-Development

*Cross-Development* bedeutet die Entwicklung einer Firmware auf einem **Host** für einen **Target**. Grund dafür ist, dass das *embedded* Target nicht genügend Ressourcen (CPU Leistung, Speicher) für die direkte Entwicklung hat.

::: callout-note
## Target & Host

**Target** (wofür): Zielsystem, für das man entwickelt.

**Host** (womit): bezeichnet die Umgebung , auf der man die Entwicklung vornimmt.
:::

### Integrated Development Environment

Eine IDE besteht aus vier Hauptteilen: IDE spezifische Funktionen, die Build Enivronment, die (GNU-)Toolchain und die SDK des entsprechenden Targets.

![](images/01_intro_crossdevelopment.png)

**Toolchain**: Kollektion von Tools wie Compiler, Linker, Debugger, etc. $\rightarrow$ einzelne Werkzeuge zum Zusammensetzen der Firmware

**Build Environment**: Steuert die Toolchain und den Übersetzungsvorgang $\rightarrow$ *make*, *Makefiles*

**IDE**: "Fancy Editor", beinhaltet Tools für bessere Produktivität, wendet Build Environment an $\rightarrow$ Intellisense, Workspace, Projekte

**SDK**: Software Development Kit $\rightarrow$ [Treiber]{.underline} (UART, I\textsuperscript{2}C, SPI,...), [Beispiele]{.underline} (Board spezifisch), [Projekt und Debugger Konfiguration]{.underline} (CMSIS-SVD, CMSIS-DAP,...), [Device Files]{.underline} (Liste von Register und deren Adressen)

## Eclipse (Open Source IDE)

Plugin-basierter Editor $\rightarrow$ deckt mehrere Programmiersprachen und Environments ab.

\textcolor{OliveGreen}{\textbf{+}} Sehr modular (Plugin System), kann auf eigenen Workflow (ungefähr) angepasst werden ; als IDE vereinfacht die Entwicklung ;

\textcolor{BrickRed}{\textbf{-}} Eierlegende Wollmilchsau $\rightarrow$ kann zu viel als nötig ist (abhängig von Workflow und Funktionsumfang) ;

::: callout-note
## Geschichte

IDE wurde hauptsächlich von IBM (International Business Machines) auf der Code Basis vom *VisualAge IDE* in 2001 entwickelt und später mit Zusammenarbeit (Konsortium) von *Borland*, *QNX*, *Red Hat*, *SuSe* und andere entstand Eclipse. \
$\rightarrow$ Grund für Erfolg war das Plugin System und die Anpassbarkeit
:::

### Plugin System

Haupt-Gimmick von Eclipse ist das Plugin System, welches die Erweiterung der bestehenden Entwicklungsumgebung durch weitere *Werkzeuge* wie zum Beispiel *Hex Editor* erlaubt.\
$\rightarrow$ Ermöglicht eine feinere Anpassung der Entwicklungsumgebung

### Workspace

Eclipse IDE arbeitet mit *Workspaces* $\rightarrow$ Kollektion von Projekten und Einstellungen (aktive Plugins, verwendete Version, spezifische Kompiler Einstellungen).

::: callout-warning
Pro IDE Version ein eigener Workspace $\rightarrow$ wegen Versionskonflikte
:::

### Begriffe

**Workspace** -- Arbeitsplatz, Kollektion von Projekten, Einstellungen und aktive Plugins

**Views** -- Einzelne Module/Fenster (z.B. *Variables* oder *FreeRTOS Task View*)

**Perspectives** -- vordefinierte Gruppe & Platzierung von Views (z.B. Debug, Develop,...)