# PID-Regler

![](images/pid_regler%5CPID-Controller-Graph-1906105412.png){fig-align="center" width="7cm"}

![](images/pid_regler%5Cpid_graph.png){fig-align="center" width="6cm"}

Die Aufgabe eines Reglers besteht darin, ausgehen von einem Regelfehler $e$ zum Zeitpunkt $t$ eine Stellgrösse $u$ so zu bestimmen, dass der Fehler in absehbarer Zeit reduziert wird.

::: callout-note
## Verhalten Regler

Grössere Fehler sollten zu grösseren Stellgrössen führen und kleinere Fehler zu kleineren Stellgrössen.
:::

## `\textcolor{BrickRed}{Proportional}`{=latex} $k_p$

P-Anteil verstärkt den Regelfehler $e$ um die *Proportionalverstärkung* $k_p$.

$$
u = k_p (r-y)=k_p\cdot e
$$

::: callout-warning
## P-Regler

$e=0$ ist mit einem P-Regler nicht möglich. Unter Annahme eines stabilen Regelkreises:

$$
G_{er}=\frac{1}{1+P\cdot C}=\frac{1}{1+P\cdot k_p}
$$

entsteht ein bleibender Fehler von:

$$
G_{er}(0)=\frac{1}{1+P(0)\cdot C(0)}=\frac{1}{1+P(0)\cdot k_p}
$$
:::

::: callout-important
## Proportionalband

$$
u = \left\{
\begin{array}{cl}
u_{max} & \text{falls } e \geq e_{max} \\
k_p\cdot e & \text{falls } e_{min} < e < e_{max} \\
u_{min} & \text{falls } e \geq e_{min}
\end{array}
\right.
$$

mit

$$
e_{min}=\frac{u_{min}}{k_p} \qquad e_{max}=\frac{u_{max}}{k_p}
$$
:::

::: callout-caution
## Permanentes Stellsignal $u$

Wird ein permanentes Stellsignal $u$ benötigt, so gilt für den P-Regler einen bestimmten Fehler $e \neq 0$.
:::

## `\textcolor{NavyBlue}{Integral}`{=latex} $k_i/T_i$

Mit dem I-Anteil werden *vergangene* Fehler mitberechnet $\rightarrow$ stationäre Fehler des P-Anteils wird korrigiert.

$$
u = k_i\cdot\int_0^t e(\tau)\ {\text{d}\tau}
$$

Die Stellgrösse wird dadurch solange geregelt, bis der Regelfehler $e=0$ wird.

## `\textcolor{OliveGreen}{Proportional}`{=latex} $k_d/T_d$

Der D-Anteil reagiert auf *zukünftige* Fehler, indem die Steigung mit einem Verstärkungsfaktor $k_d$ verstärkt wird.

$$
e(t+T_d)\approx e(t)+T_d \frac{\text{d}e}{\text{d}t} \qquad u = k_d \frac{\text{d}e}{\text{d}t}
$$

::: callout-important
## Limitierung der D-Verstärkung

**Grund**: Für träge Prozess führt eine sprungartige Veränderung (z.B. Sprungantwort oder Dirac-Impuls) zu einem sprungartigen Regelfehler $e(t)\approx \sigma$.
:::

## Übertragungsfunktion

$$
C(s)=k_p\left(1+\frac{k_i}{s}+k_d\cdot s\right)=k_p\left(1+\frac{1}{T_i\cdot s}+T_d\cdot s\right)
$$

::: callout-important
Diese Beschreibung ist nur eine [idealisierte]{.underline} Repräsentation, welche für das Verständnis des System hilfreich ist. Im [praktischen]{.underline} Einsatz sind Modifikationen notwendig.
:::

## Auslegung

### Anhand Bodediagramm

Diese Auslegung fokussiert anhand des **offenen** Kreises ($L=C\cdot P$) des Regelkreises.

$$
C(s) = k_i \frac{(1+s\ T_1)(1+s\ T_2)}{s} = k_p \frac{(1+s\ T_i)(1+s\ T_d)}{s\cdot T_i}
$$

[Zielgrössen]{.underline}: Durchtrittsfrequenz $\omega_{gc}$, die Phasenreserve $\varphi_m$ und allenfalls Amplitudenreserve $g_m$.

::: callout-tip
## Vorgehen

Prozess: $P(s)=\frac{10}{(1+s)^2}$ mit Ziel $\omega_{gc}\geq 10 \frac{rad}{s}$, $\varphi_m\geq 50°$.

1.  P-Regler für Erreichung von $\omega_{gc}$. Mit $\lvert k_p\cdot P(j\omega_{gc})\rvert = 1$ (Nyquist-Kriterium) folgt:

$$
k_p = \frac{1}{\left\lvert\frac{10}{1+10j}\right\rvert} = \frac{(\sqrt{1^2+10^2})^2}{10}=10.1
$$

$$
\textcolor{BrickRed}{C(s)}=k_p=10.1
$$

2.  PI-Regler für Reduktion der zusätzlichen Phasensenkung im Bereich von $\omega_{gc}$

$$
\textcolor{NavyBlue}{C(s)} = k_i\cdot\frac{(1+s\cdot T_1)}{s} = \frac{10\cdot(1+s)}{s}
$$

1.  PID-Regler für genügend Phasenabhebung im Bereich von $\omega_{gc}$

$$
\begin{split}
\textcolor{OliveGreen}{C(s)} &= k_i\cdot\frac{(1+s\cdot T_1)(1+s\cdot T_2)}{s} \\ &= 10\cdot\frac{(1+s)(1+0.1s)}{s}
\end{split}
$$

4.  Kontrolle von resultiernden Durchtrittsfrequenz $\omega_{gc}'$ und damit ergebenden Phasenreserve $\varphi_m$.

![](images/pid_regler%5Causlegung_bodediagramm.png){fig-align="center"}
:::

### Anhand von Einstellregeln

## Stellgrössen-Sättigung

::: callout-warning
## Sättigungseffekt
:::

### Windup & Anti-Windup

*Windup* entsteht durch